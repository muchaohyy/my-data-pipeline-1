service: ${env:APPLICATION}
frameworkVersion: '4'

useDotenv: true
variablesResolutionMode: 20210326

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
custom:
  pythonRequirements:
    dockerizePip: false
  # prune:
  #   automatic: true
  #   number: 3
  dotenv:
    include:
      - TZ_LOCAL
  dynamoDbTable: data_pipeline_1_dynamodb_table
  dynamoDbArn: !Join
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':table/'
                    - ${self:custom.dynamoDbTable}
provider:
  name: aws
  runtime: python3.10
  memorySize: 256
  timeout: 300
  deploymentBucket:
    name: jiangren14-chao-deployment
    maxPreviousDeploymentArtifacts: 3
  region: ${env:REGION}
  versionFunctions: true

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:HeadObject
        - s3:GetObject
      Resource:
        - arn:aws:s3:::jiangren14-chao-dynamo/*
    - Effect: Allow
      Action: 
        - dynamodb:*
      Resource:
        - ${self:custom.dynamoDbArn}
    - Effect: Allow
      Action:
        - logs:*
      Resource: "*"

# you can define service wide environment variables here
  environment:
    DYNAMO_TABLE: ${self:custom.dynamoDbTable}

# you can add packaging information here
package:
  exclude:
    - __cache__/**
    - __pycache__/**
    - node_modules/**
    - 'package.json'
    - 'package-lock.json'

functions:
  dataPipeline:
    handler: data_pipeline.run
    name: my_first_data_pipeline_1
    description: "jiang ren data pipeline demo"
    events:
      - s3:
          bucket: jiangren14-chao-dynamo
          event: s3:ObjectCreated:*
          rules:
            - prefix: csv/
          existing: true

# you can add CloudFormation resource templates here
resources:
  Description: Jang Ren data pipeline services defination
  Resources:
    pipelineDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoDbTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
